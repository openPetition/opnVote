type Election @entity(immutable: false) {
  id: String!
  startTime: BigInt! # uint256
  endTime: BigInt! # uint256
  registerId: Int! # uint8
  authProviderId: Int! # uint8
  svsId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  registerPublicKeyN:Bytes
  registerPublicKeyE:Bytes
  publicKey:Bytes
  privateKey:Bytes
  totalVotes: BigInt
  registeredVoterCount: BigInt 
  authorizedVoterCount: BigInt
  status: Int
  descriptionCID:String
  descriptionBlob:String
}


type ElectionCanceled @entity(immutable: true) {
  id: Bytes!
  electionID: BigInt! # uint256
  cancelReasonIPFSCID: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ElectionCreated @entity(immutable: true) {
  id: Bytes!
  electionID: BigInt! # uint256
  startTime: BigInt! # uint256
  endTime: BigInt! # uint256
  registerId: Int! # uint8
  authProviderId: Int! # uint8
  svsId: Int! # uint8
  descriptionIPFSCID: String! # string
  publicKey: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ElectionRegisterPublicKeySet @entity(immutable: true) {
  id: Bytes!
  electionID: BigInt! # uint256
  n: Bytes! # bytes
  e: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ElectionResultsPublished @entity(immutable: true) {
  id: Bytes!
  electionID: BigInt! # uint256
  privateKey: Bytes! # bytes
  yesVotes: BigInt! # uint256
  noVotes: BigInt! # uint256
  invalidVotes: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ElectionStatusChanged @entity(immutable: true) {
  id: Bytes!
  electionID: BigInt! # uint256
  oldStatus: Int! # uint8
  newStatus: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VoteCast @entity(immutable: true) {
  id: Bytes!
  electionID: BigInt! # uint256
  voter: Bytes! # address
  svsSignature: Bytes! # bytes
  vote_encrypted: Bytes! # bytes
  vote_encrypted_user: Bytes! # bytes
  unblindedElectionToken: Bytes! # bytes
  unblindedSignature: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VoteUpdated @entity(immutable: true) {
  id: Bytes!
  electionID: BigInt! # uint256
  voter: Bytes! # address
  vote_encrypted: Bytes! # bytes
  vote_encrypted_user: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VoterAuthorized @entity(immutable: true) {
  id: Bytes!
  apID: Int! # uint8
  electionID: BigInt! # uint256
  voterID: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VoterRegistered @entity(immutable: true) {
  id: Bytes!
  registerID: Int! # uint8
  electionID: BigInt! # uint256
  voterID: BigInt! # uint256
  blindedSignature: Bytes! # bytes
  blindedElectionToken: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VotersAuthorized @entity(immutable: true) {
  id: Bytes!
  apID: Int! # uint8
  electionID: BigInt! # uint256
  voterIDs: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VotersRegistered @entity(immutable: true) {
  id: Bytes!
  registerID: Int! # uint8
  electionID: BigInt! # uint256
  voterIDs: [BigInt!]! # uint256[]
  blindedSignatures: [Bytes!]! # bytes[]
  blindedElectionTokens: [Bytes!]! # bytes[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
